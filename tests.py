import pytest
from main import BooksCollector


class TestBooksCollector:

    # 1Ô∏è‚É£ add_new_book ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
    @pytest.mark.parametrize('book_name', [
        '–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü',
        '–ü–∏–∫–Ω–∏–∫ –Ω–∞ –æ–±–æ—á–∏–Ω–µ',
        '–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
    ])
    def test_add_new_book_valid(self, book_name):
        collector = BooksCollector()
        collector.add_new_book(book_name)

        assert book_name in collector.get_books_genre()
        assert collector.books_genre[book_name] == ''

    # 2Ô∏è‚É£ add_new_book ‚Äî –∫–Ω–∏–≥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤
    def test_add_new_book_too_long_name(self):
        collector = BooksCollector()
        long_name = '–ê' * 41
        collector.add_new_book(long_name)

        assert long_name not in collector.get_books_genre()

    # 3Ô∏è‚É£ set_book_genre ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –∫–Ω–∏–≥–µ
    def test_set_book_genre_success(self):
        collector = BooksCollector()
        collector.books_genre['–ú–∞—Ç—Ä–∏—Ü–∞'] = ''
        collector.set_book_genre('–ú–∞—Ç—Ä–∏—Ü–∞', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')

        assert collector.books_genre['–ú–∞—Ç—Ä–∏—Ü–∞'] == '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'

    # 4Ô∏è‚É£ set_book_genre ‚Äî –∂–∞–Ω—Ä –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ genre
    def test_set_book_genre_invalid_genre(self):
        collector = BooksCollector()
        collector.books_genre['–ö–Ω–∏–≥–∞'] = ''
        collector.set_book_genre('–ö–Ω–∏–≥–∞', '–î—Ä–∞–º–∞')

        assert collector.books_genre['–ö–Ω–∏–≥–∞'] == ''

    # 5Ô∏è‚É£ get_book_genre ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∂–∞–Ω—Ä
    def test_get_book_genre_returns_correct_value(self):
        collector = BooksCollector()
        collector.books_genre['–ú–∞—Ç—Ä–∏—Ü–∞'] = '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'

        assert collector.get_book_genre('–ú–∞—Ç—Ä–∏—Ü–∞') == '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'

    # 6Ô∏è‚É£ get_books_with_specific_genre ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –Ω—É–∂–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    def test_get_books_with_specific_genre(self):
        collector = BooksCollector()
        collector.books_genre = {'–ö–Ω–∏–≥–∞ 1': '–ö–æ–º–µ–¥–∏–∏', '–ö–Ω–∏–≥–∞ 2': '–£–∂–∞—Å—ã'}

        result = collector.get_books_with_specific_genre('–ö–æ–º–µ–¥–∏–∏')

        assert result == ['–ö–Ω–∏–≥–∞ 1']

    # 7Ô∏è‚É£ get_books_genre ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å –∫–Ω–∏–≥ –∏ –∂–∞–Ω—Ä–æ–≤
    def test_get_books_genre_returns_correct_dict(self):
        collector = BooksCollector()
        collector.books_genre = {
            '–ú–∞—Ç—Ä–∏—Ü–∞': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
            '–û–Ω–æ': '–£–∂–∞—Å—ã'
        }

        result = collector.get_books_genre()

        assert result == {'–ú–∞—Ç—Ä–∏—Ü–∞': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–û–Ω–æ': '–£–∂–∞—Å—ã'}

    # 8Ô∏è‚É£ get_books_for_children ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    def test_get_books_for_children(self):
        collector = BooksCollector()
        collector.books_genre = {
            '–°–º–µ—à–∞—Ä–∏–∫–∏': '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã',
            '–û–Ω–æ': '–£–∂–∞—Å—ã',
            '–ú–∞—Ç—Ä–∏—Ü–∞': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'
        }

        result = collector.get_books_for_children()

        assert '–°–º–µ—à–∞—Ä–∏–∫–∏' in result
        assert '–ú–∞—Ç—Ä–∏—Ü–∞' in result
        assert '–û–Ω–æ' not in result

    # 9Ô∏è‚É£ add_book_in_favorites ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    def test_add_book_in_favorites_adds_book(self):
        collector = BooksCollector()
        collector.books_genre['–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'] = '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'
        collector.add_book_in_favorites('–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä')

        assert '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä' in collector.favorites

    # üîü delete_book_from_favorites ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    def test_delete_book_from_favorites_removes_book(self):
        collector = BooksCollector()
        collector.favorites = ['–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏']
        collector.delete_book_from_favorites('–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏')

        assert '–¢–æ–º –∏ –î–∂–µ—Ä—Ä–∏' not in collector.favorites

    # 1Ô∏è‚É£1Ô∏è‚É£ get_list_of_favorites_books ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    def test_get_list_of_favorites_books_returns_correct_list(self):
        collector = BooksCollector()
        collector.favorites = ['–®—Ä–µ–∫', '–ú–∞—Ç—Ä–∏—Ü–∞']

        result = collector.get_list_of_favorites_books()

        assert result == ['–®—Ä–µ–∫', '–ú–∞—Ç—Ä–∏—Ü–∞']